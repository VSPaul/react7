{"version":3,"sources":["React8/LifeCycle.js","Example/FormEmployee.jsx","Exercise/FormFilms.js","App.js","serviceWorker.js","index.js"],"names":["LifeCycle","React","Component","props","state","title","textglobalTitle","onChange","bind","submitForm","e","this","setState","target","name","value","preventDefault","alert","console","log","className","onSubmit","htmlFor","type","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRA0EeA,GCpEYC,IAAMC,UCATD,IAAMC,U,YFA1B,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,GACPC,gBAAiB,eAErB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAPH,E,sEAUVE,GACLC,KAAKC,SAAL,eACKF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,iCAIvBL,GACPA,EAAEM,iBACFL,KAAKC,SAAS,CACVN,gBAAiB,c,0CAMrBW,MAAM,qB,2CAINC,QAAQC,IAAI,qB,+BAOZ,OAEI,yBAAKC,UAAU,gBACX,wCAEA,0BAAMC,SAAUV,KAAKF,YACjB,kCACI,gCAAQ,4BAAKE,KAAKP,MAAME,kBAExB,yBAAKc,UAAU,aACX,2BAAOE,QAAQ,SAAQ,sCACvB,2BACIC,KAAK,OACLC,GAAG,QACHV,KAAK,QACLP,SAAUI,KAAKJ,SACfQ,MAAOJ,KAAKP,MAAMC,SAI1B,6BACA,yBAAKe,UAAU,aACX,2BAAOA,UAAU,MAAMG,KAAK,SAASR,MAAM,e,GA5D/Cd,IAAMC,YGYfuB,MAVf,WACE,OACE,yBAAKL,UAAU,OAGb,kBAAC,EAAD,QCCcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e77fef12.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nclass LifeCycle extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            textglobalTitle: 'globalTitle'\n        }\n        this.onChange = this.onChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n        this.setState({\n            textglobalTitle: 'My form'\n        })\n    }\n\n    componentDidMount() {\n        // console.log('Rendered Form')\n        alert('Rendered Form !');\n      }\n\n    componentDidUpdate() {\n        console.log('Title changed !')\n    }\n      \n    \n\n    render() {\n\n        return (\n\n            <div className=\"FormEmployee\">\n                <h1> React 8</h1>\n\n                <form onSubmit={this.submitForm}>\n                    <fieldset>\n                        <legend><h2>{this.state.textglobalTitle}</h2></legend>\n\n                        <div className=\"form-data\">\n                            <label htmlFor=\"title\"><h4>Title</h4></label>\n                            <input\n                                type=\"text\"\n                                id=\"title\"\n                                name=\"title\"\n                                onChange={this.onChange}\n                                value={this.state.title}\n                                \n                            />\n                        </div>\n                        <hr />\n                        <div className=\"form-data\">\n                            <input className='btn' type=\"submit\" value=\"OK\" />\n                        </div>\n                    </fieldset>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default LifeCycle;","import React from 'react';\n\n\nconst url = \"https://post-a-form.herokuapp.com/api/employees/\";\n\n\nclass FormEmployee extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          lastname: '',\n          firstname: '',\n          email: '',\n        }\n        this.onChange = this.onChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n      }\n\n      onChange(e) {\n        this.setState({\n          [e.target.name]: e.target.value,\n        });\n      }\n\n      submitForm(e) {\n        e.preventDefault();\n        const config = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(this.state),\n          };\n        \n\n        fetch(url, config)\n      .then(res => res.json())\n        .then(res => {\n          if (res.error) {\n            alert(res.error);\n          } else {\n            alert(`Added employee with the ID ${res}!`);\n          }\n        }).catch(e => {\n          console.error(e);\n          alert('Error during the employee addition');\n        });\n      }\n\n       \n\n    render(){\n        \n        return(\n\n<div className=\"FormEmployee\">\n  <h1> employee’s entry</h1>\n  <form onSubmit={this.submitForm}>\n    <fieldset>\n      <legend>Information</legend>\n      <div className=\"form-data\">\n        <label htmlFor=\"lastname\">Last Name</label>\n        <input\n          type=\"text\"\n          id=\"lastname\"\n          name=\"lastname\"\n          onChange={this.onChange}\n          value={this.state.lastname}\n        />\n      </div>\n\n      <div className=\"form-data\">\n        <label htmlFor=\"firstname\">First Name</label>\n        <input\n          type=\"text\"\n          id=\"firstname\"\n          name=\"firstname\"\n          onChange={this.onChange}\n          value={this.state.firstname}\n        />\n      </div>\n\n      <div className=\"form-data\">\n        <label htmlFor=\"email\">E-mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          onChange={this.onChange}\n          value={this.state.email}\n        />\n      </div>\n      <hr />\n      <div className=\"form-data\">\n        <input className='btn' type=\"submit\" value=\"Send\" />\n      </div>\n    </fieldset>\n  </form>\n</div>\n\n        )\n    }\n}\n\nexport default FormEmployee;","import React from 'react';\n\n\nconst url = \"https://post-a-form.herokuapp.com/api/movies/\";\n\n\nclass FormFilms extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          title: '',\n          poster: '',\n          comment: '',\n        }\n        this.onChange = this.onChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n      }\n\n      onChange(e) {\n        this.setState({\n          [e.target.name]: e.target.value,\n        });\n      }\n\n      submitForm(e) {\n        e.preventDefault();\n        const config = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(this.state),\n          };\n        \n\n        fetch(url, config)\n      .then(res => res.json())\n        .then(res => {\n          if (res.error) {\n            alert(res.error);\n          } else {\n            alert(`Added employee with the ID ${res}!`);\n          }\n        }).catch(e => {\n          console.error(e);\n          alert('Error during the employee addition');\n        });\n      }\n\n\n    render(){\n        \n        return(\n\n<div className=\"FormEmployee\">\n  <h1> Films’s entry</h1>\n\n  <form onSubmit={this.submitForm}>\n    <fieldset>\n      <legend>Information</legend>\n      <div className=\"form-data\">\n        <label htmlFor=\"title\">Film Name</label>\n        <input\n          type=\"text\"\n          id=\"filmname\"\n          name=\"title\"\n          onChange={this.onChange}\n          value={this.state.title}\n        />\n      </div>\n\n      <div className=\"form-data\">\n        <label htmlFor=\"url\">Url</label>\n        <input\n          type=\"url\"\n          id=\"url\"\n          name=\"poster\"\n          onChange={this.onChange}\n          value={this.state.poster}\n        />\n      </div>\n\n      <div className=\"form-data\">\n      <textarea placeholder='Why do you like this film?' rows=\"4\" cols=\"40\" style={{width:  \"386px\"}}\n        type=\"text\"\n        id=\"comment\"\n        name=\"comment\"\n        onChange={this.onChange}\n        value={this.state.comment}/>\n        \n\n      </div>\n      <hr />\n      <div className=\"form-data\">\n        <input className='btn' type=\"submit\" value=\"Send\" />\n      </div>\n    </fieldset>\n  </form>\n</div>\n\n        )\n    }\n}\n\nexport default FormFilms;","import React from 'react';\nimport './App.css';\nimport FormEmployee from './Example/FormEmployee.jsx';\nimport FormFilms from './Exercise/FormFilms.js';\nimport LifeCycle from './React8/LifeCycle';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <FormEmployee/> */}\n      {/* <FormFilms/> */}\n      <LifeCycle/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}